//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Game/Input/GamePlay.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GamePlayControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GamePlayControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GamePlay"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""a5d53222-5407-4067-9a11-1b20ea6f096d"",
            ""actions"": [
                {
                    ""name"": ""RunForward"",
                    ""type"": ""Button"",
                    ""id"": ""61bd910d-f688-45f8-a0a3-745ce5c138b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RunBack"",
                    ""type"": ""Button"",
                    ""id"": ""10cb97ee-e909-4129-8983-bbae2d871cd1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RunLeft"",
                    ""type"": ""Button"",
                    ""id"": ""d39f52e3-5446-4fdb-8769-34a3f0aa026f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RunRight"",
                    ""type"": ""Button"",
                    ""id"": ""28a643a9-96a0-4d27-a191-b5f04fb9792b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AutoAction"",
                    ""type"": ""Button"",
                    ""id"": ""958d0ae7-f0f0-475f-bab1-7359ceccec43"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8923397b-4e62-4b70-abfd-adcd0fbdd72b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RunForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8588291f-2a65-41fa-beba-143de6705bbc"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RunForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aca728a8-8940-4e20-a4bc-0584bd59e872"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RunForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ba65171-4c57-4b2f-b7a8-6a357e7d4a43"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RunBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0dbd4c44-4f24-4fd1-a032-a997b4a784be"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RunBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eaa4b8db-b47a-4147-b3a3-896b8dcb3143"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RunBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e3e9c10-ad1a-4bd6-b457-5fe11ac3db4a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RunLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e20cca51-c09e-4f9e-bcba-d6757d2dbf0b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RunLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""decfd407-5b47-4aa7-99a5-436f2828fee8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RunRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9f80486-a8eb-411e-b1e7-3917a27f73b1"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RunRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dee9697a-ee70-4b43-b83d-c43756a1e0ca"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RunRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b376c1b-502c-42f3-9a3f-049e29f2fbca"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RunLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b82fe73-0be2-49aa-8266-6b20530ab37f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""AutoAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14e48b5b-041f-492a-9376-f0eb919a3036"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""AutoAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": []
        }
    ]
}");
        // GamePlay
        m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
        m_GamePlay_RunForward = m_GamePlay.FindAction("RunForward", throwIfNotFound: true);
        m_GamePlay_RunBack = m_GamePlay.FindAction("RunBack", throwIfNotFound: true);
        m_GamePlay_RunLeft = m_GamePlay.FindAction("RunLeft", throwIfNotFound: true);
        m_GamePlay_RunRight = m_GamePlay.FindAction("RunRight", throwIfNotFound: true);
        m_GamePlay_AutoAction = m_GamePlay.FindAction("AutoAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlay
    private readonly InputActionMap m_GamePlay;
    private IGamePlayActions m_GamePlayActionsCallbackInterface;
    private readonly InputAction m_GamePlay_RunForward;
    private readonly InputAction m_GamePlay_RunBack;
    private readonly InputAction m_GamePlay_RunLeft;
    private readonly InputAction m_GamePlay_RunRight;
    private readonly InputAction m_GamePlay_AutoAction;
    public struct GamePlayActions
    {
        private @GamePlayControl m_Wrapper;
        public GamePlayActions(@GamePlayControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @RunForward => m_Wrapper.m_GamePlay_RunForward;
        public InputAction @RunBack => m_Wrapper.m_GamePlay_RunBack;
        public InputAction @RunLeft => m_Wrapper.m_GamePlay_RunLeft;
        public InputAction @RunRight => m_Wrapper.m_GamePlay_RunRight;
        public InputAction @AutoAction => m_Wrapper.m_GamePlay_AutoAction;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
        public void SetCallbacks(IGamePlayActions instance)
        {
            if (m_Wrapper.m_GamePlayActionsCallbackInterface != null)
            {
                @RunForward.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRunForward;
                @RunForward.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRunForward;
                @RunForward.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRunForward;
                @RunBack.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRunBack;
                @RunBack.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRunBack;
                @RunBack.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRunBack;
                @RunLeft.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRunLeft;
                @RunLeft.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRunLeft;
                @RunLeft.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRunLeft;
                @RunRight.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRunRight;
                @RunRight.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRunRight;
                @RunRight.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRunRight;
                @AutoAction.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnAutoAction;
                @AutoAction.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnAutoAction;
                @AutoAction.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnAutoAction;
            }
            m_Wrapper.m_GamePlayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RunForward.started += instance.OnRunForward;
                @RunForward.performed += instance.OnRunForward;
                @RunForward.canceled += instance.OnRunForward;
                @RunBack.started += instance.OnRunBack;
                @RunBack.performed += instance.OnRunBack;
                @RunBack.canceled += instance.OnRunBack;
                @RunLeft.started += instance.OnRunLeft;
                @RunLeft.performed += instance.OnRunLeft;
                @RunLeft.canceled += instance.OnRunLeft;
                @RunRight.started += instance.OnRunRight;
                @RunRight.performed += instance.OnRunRight;
                @RunRight.canceled += instance.OnRunRight;
                @AutoAction.started += instance.OnAutoAction;
                @AutoAction.performed += instance.OnAutoAction;
                @AutoAction.canceled += instance.OnAutoAction;
            }
        }
    }
    public GamePlayActions @GamePlay => new GamePlayActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IGamePlayActions
    {
        void OnRunForward(InputAction.CallbackContext context);
        void OnRunBack(InputAction.CallbackContext context);
        void OnRunLeft(InputAction.CallbackContext context);
        void OnRunRight(InputAction.CallbackContext context);
        void OnAutoAction(InputAction.CallbackContext context);
    }
}
